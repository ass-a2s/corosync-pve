From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jan Friesse <jfriesse@redhat.com>
Date: Thu, 3 Oct 2019 11:35:37 +0200
Subject: [PATCH] totempg: Check sanity (length) of received message

Signed-off-by: Jan Friesse <jfriesse@redhat.com>
Signed-off-by: Thomas Lamprecht <t.lamprecht@proxmox.com>
---
 exec/totempg.c | 32 ++++++++++++++++++++++++++++++--
 1 file changed, 30 insertions(+), 2 deletions(-)

diff --git a/exec/totempg.c b/exec/totempg.c
index 6b3c590d..e251c236 100644
--- a/exec/totempg.c
+++ b/exec/totempg.c
@@ -603,10 +603,18 @@ static void totempg_deliver_fn (
 	const char *data;
 	int datasize;
 	struct iovec iov_delv;
+	size_t expected_msg_len;
 
 	assembly = assembly_ref (nodeid);
 	assert (assembly);
 
+	if (msg_len < sizeof(struct totempg_mcast)) {
+		log_printf(LOG_WARNING,
+		    "Message (totempg_mcast) received from node " CS_PRI_NODE_ID " is too short...  Ignoring.", nodeid);
+
+		return ;
+	}
+
 	/*
 	 * Assemble the header into one block of data and
 	 * assemble the packet contents into one block of data to simplify delivery
@@ -621,14 +629,34 @@ static void totempg_deliver_fn (
 	datasize = sizeof (struct totempg_mcast) +
 		msg_count * sizeof (unsigned short);
 
+	if (msg_len < datasize) {
+		log_printf(LOG_WARNING,
+		    "Message (totempg_mcast datasize) received from node " CS_PRI_NODE_ID
+		    " is too short...  Ignoring.", nodeid);
+
+		return ;
+	}
+
 	memcpy (header, msg, datasize);
 	data = msg;
 
 	msg_lens = (unsigned short *) (header + sizeof (struct totempg_mcast));
-	if (endian_conversion_required) {
-		for (i = 0; i < mcast->msg_count; i++) {
+	expected_msg_len = datasize;
+	for (i = 0; i < mcast->msg_count; i++) {
+		if (endian_conversion_required) {
 			msg_lens[i] = swab16 (msg_lens[i]);
 		}
+
+		expected_msg_len += msg_lens[i];
+	}
+
+	if (msg_len != expected_msg_len) {
+		log_printf(LOG_WARNING,
+		    "Message (totempg_mcast) received from node " CS_PRI_NODE_ID
+		    " doesn't have expected length of %zu (has %u) bytes...  Ignoring.",
+		    nodeid, expected_msg_len, msg_len);
+
+		return ;
 	}
 
 	assert((assembly->index+msg_len) < sizeof(assembly->data));
