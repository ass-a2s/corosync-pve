Index: corosync-1.0/exec/coroparse.c
===================================================================
--- corosync-1.0.orig/exec/coroparse.c	2009-06-10 06:33:21.000000000 -0400
+++ corosync-1.0/exec/coroparse.c	2009-06-10 06:56:56.000000000 -0400
@@ -261,7 +261,7 @@
 
 	filename = getenv ("COROSYNC_MAIN_CONFIG_FILE");
 	if (!filename)
-		filename = SYSCONFDIR "/corosync.conf";
+		filename = SYSCONFDIR "/corosync/corosync.conf";
 
 	fp = fopen (filename, "r");
 	if (fp == NULL) {
Index: corosync-1.0/exec/totemconfig.c
===================================================================
--- corosync-1.0.orig/exec/totemconfig.c	2009-06-10 06:33:21.000000000 -0400
+++ corosync-1.0/exec/totemconfig.c	2009-06-10 06:56:56.000000000 -0400
@@ -764,7 +764,7 @@
 	if (!got_key) {
 		const char *filename = getenv("COROSYNC_TOTEM_AUTHKEY_FILE");
 		if (!filename)
-			filename = SYSCONFDIR "/ais/authkey";
+			filename = SYSCONFDIR "/corosync/authkey";
 		res = read_keyfile(filename, totem_config, error_string);
 		if (res)
 			goto key_error;
Index: corosync-1.0/tools/corosync-keygen.c
===================================================================
--- corosync-1.0.orig/tools/corosync-keygen.c	2009-06-10 06:33:22.000000000 -0400
+++ corosync-1.0/tools/corosync-keygen.c	2009-06-10 07:34:39.000000000 -0400
@@ -44,40 +44,45 @@
 
 #include <netinet/in.h>
 
-#define KEYFILE SYSCONFDIR "/ais/authkey"
+#define KEYFILE SYSCONFDIR "/corosync/authkey"
 
 int main (void) {
 	int authkey_fd;
 	int random_fd;
 	unsigned char key[128];
 	ssize_t res;
+	ssize_t bytes = 0;
 
 	printf ("Corosync Cluster Engine Authentication key generator.\n");
 	if (geteuid() != 0) {
 		printf ("Error: Authorization key must be generated as root user.\n");
 		exit (1);
 	}
-	if (mkdir (SYSCONFDIR "/ais", 0700)) {
+	if (mkdir (SYSCONFDIR "/corosync", 0700)) {
 		if (errno != EEXIST) {
-			perror ("Failed to create directory: " SYSCONFDIR "/ais");
+			perror ("Failed to create directory: " SYSCONFDIR "/corosync");
 			exit (1);
 		}
 	}
 
-	printf ("Gathering %lu bits for key from /dev/random.\n", (unsigned long)(sizeof (key) * 8));
-	random_fd = open ("/dev/random", O_RDONLY);
+	printf ("Gathering %lu bits for key from /dev/urandom.\n", (unsigned long)(sizeof (key) * 8));
+	random_fd = open ("/dev/urandom", O_RDONLY);
 	if (random_fd == -1) {
-		perror ("Is /dev/random present? Opening /dev/random");
+		perror ("Is /dev/urandom present? Opening /dev/urandom");
 		exit (1);
 	}
 
 	/*
 	 * Read random data
 	 */
-	res = read (random_fd, key, sizeof (key));
-	if (res != sizeof (key)) {
-		perror ("Could not read /dev/random");
-		exit (1);
+	while (bytes < sizeof (key)) {
+		res = read (random_fd, key + bytes, sizeof (key) - bytes);
+		if (res <= 0) {
+			perror ("Could not read /dev/urandom");
+			exit (1);
+		}
+		bytes += res;
+		printf ("Got %d bits\n", bytes*8);
 	}
 	close (random_fd);
 
